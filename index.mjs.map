{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isCollection from '@stdlib/assert-is-collection';\nimport dtypes from '@stdlib/array-dtypes';\nimport dtype from '@stdlib/array-dtype';\nimport contains from '@stdlib/array-base-assert-contains';\nimport join from '@stdlib/array-base-join';\nimport { ndarray as strided } from '@stdlib/stats-strided-nanmskrange';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// VARIABLES //\n\nvar IDTYPES = dtypes( 'real_and_generic' );\nvar GENERIC_DTYPE = 'generic';\n\n\n// MAIN //\n\n/**\n* Computes the range of an array according to a mask, ignoring `NaN` values.\n*\n* @param {NumericArray} x - input array\n* @param {NumericArray} mask - mask array\n* @throws {TypeError} first argument must be an array-like object\n* @throws {TypeError} first argument must have a supported data type\n* @throws {TypeError} second argument must be an array-like object\n* @throws {TypeError} second argument must have a supported data type\n* @throws {RangeError} first and second arguments must have the same length\n* @returns {number} range\n*\n* @example\n* var x = [ 1.0, -2.0, 4.0, 2.0, NaN, NaN ];\n* var mask = [ 0, 0, 1, 0, 0, 0 ];\n*\n* var v = nanmskrange( x, mask );\n* // returns 4.0\n*/\nfunction nanmskrange( x, mask ) {\n\tvar dt;\n\tif ( !isCollection( x ) ) {\n\t\tthrow new TypeError( format( 'null2O', x ) );\n\t}\n\tdt = dtype( x ) || GENERIC_DTYPE;\n\tif ( !contains( IDTYPES, dt ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have one of the following data types: \"%s\". Data type: `%s`.', join( IDTYPES, '\", \"' ), dt ) );\n\t}\n\tif ( !isCollection( mask ) ) {\n\t\tthrow new TypeError( format( 'null2y', mask ) );\n\t}\n\tdt = dtype( mask ) || GENERIC_DTYPE;\n\tif ( !contains( IDTYPES, dt ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must have one of the following data types: \"%s\". Data type: `%s`.', join( IDTYPES, '\", \"' ), dt ) );\n\t}\n\tif ( x.length !== mask.length ) {\n\t\tthrow new RangeError( format( 'null1E' ) );\n\t}\n\treturn strided( x.length, x, 1, 0, mask, 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default nanmskrange;\n"],"names":["IDTYPES","dtypes","GENERIC_DTYPE","nanmskrange","x","mask","dt","isCollection","TypeError","format","dtype","contains","join","length","RangeError","strided"],"mappings":";;opBAiCA,IAAIA,EAAUC,EAAQ,oBAClBC,EAAgB,UAwBpB,SAASC,EAAaC,EAAGC,GACxB,IAAIC,EACJ,IAAMC,EAAcH,GACnB,MAAM,IAAII,UAAWC,EAAQ,SAAUL,IAGxC,GADAE,EAAKI,EAAON,IAAOF,GACbS,EAAUX,EAASM,GACxB,MAAM,IAAIE,UAAWC,EAAQ,qGAAsGG,EAAMZ,EAAS,QAAUM,IAE7J,IAAMC,EAAcF,GACnB,MAAM,IAAIG,UAAWC,EAAQ,SAAUJ,IAGxC,GADAC,EAAKI,EAAOL,IAAUH,GAChBS,EAAUX,EAASM,GACxB,MAAM,IAAIE,UAAWC,EAAQ,sGAAuGG,EAAMZ,EAAS,QAAUM,IAE9J,GAAKF,EAAES,SAAWR,EAAKQ,OACtB,MAAM,IAAIC,WAAYL,EAAQ,WAE/B,OAAOM,EAASX,EAAES,OAAQT,EAAG,EAAG,EAAGC,EAAM,EAAG,EAC7C"}