{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isCollection = require( '@stdlib/assert-is-collection' );\nvar dtypes = require( '@stdlib/array-dtypes' );\nvar dtype = require( '@stdlib/array-dtype' );\nvar contains = require( '@stdlib/array-base-assert-contains' );\nvar join = require( '@stdlib/array-base-join' );\nvar strided = require( '@stdlib/stats-strided-nanmskrange' ).ndarray;\nvar format = require( '@stdlib/string-format' );\n\n\n// VARIABLES //\n\nvar IDTYPES = dtypes( 'real_and_generic' );\nvar GENERIC_DTYPE = 'generic';\n\n\n// MAIN //\n\n/**\n* Computes the range of an array according to a mask, ignoring `NaN` values.\n*\n* @param {NumericArray} x - input array\n* @param {NumericArray} mask - mask array\n* @throws {TypeError} first argument must be an array-like object\n* @throws {TypeError} first argument must have a supported data type\n* @throws {TypeError} second argument must be an array-like object\n* @throws {TypeError} second argument must have a supported data type\n* @throws {RangeError} first and second arguments must have the same length\n* @returns {number} range\n*\n* @example\n* var x = [ 1.0, -2.0, 4.0, 2.0, NaN, NaN ];\n* var mask = [ 0, 0, 1, 0, 0, 0 ];\n*\n* var v = nanmskrange( x, mask );\n* // returns 4.0\n*/\nfunction nanmskrange( x, mask ) {\n\tvar dt;\n\tif ( !isCollection( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array-like object. Value: `%s`.', x ) );\n\t}\n\tdt = dtype( x ) || GENERIC_DTYPE;\n\tif ( !contains( IDTYPES, dt ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must have one of the following data types: \"%s\". Data type: `%s`.', join( IDTYPES, '\", \"' ), dt ) );\n\t}\n\tif ( !isCollection( mask ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an array-like object. Value: `%s`.', mask ) );\n\t}\n\tdt = dtype( mask ) || GENERIC_DTYPE;\n\tif ( !contains( IDTYPES, dt ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must have one of the following data types: \"%s\". Data type: `%s`.', join( IDTYPES, '\", \"' ), dt ) );\n\t}\n\tif ( x.length !== mask.length ) {\n\t\tthrow new RangeError( format( 'invalid arguments. First and second arguments must have the same length.' ) );\n\t}\n\treturn strided( x.length, x, 1, 0, mask, 1, 0 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = nanmskrange;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the range of an array according to a mask, ignoring `NaN` values.\n*\n* @module @stdlib/stats-array-nanmskrange\n*\n* @example\n* var nanmskrange = require( '@stdlib/stats-array-nanmskrange' );\n*\n* var x = [ 1.0, -2.0, 4.0, 2.0, NaN, NaN ];\n* var mask = [ 0, 0, 1, 0, 0, 0 ];\n*\n* var v = nanmskrange( x, mask );\n* // returns 4.0\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAe,QAAS,8BAA+B,EACvDC,EAAS,QAAS,sBAAuB,EACzCC,EAAQ,QAAS,qBAAsB,EACvCC,EAAW,QAAS,oCAAqC,EACzDC,EAAO,QAAS,yBAA0B,EAC1CC,EAAU,QAAS,mCAAoC,EAAE,QACzDC,EAAS,QAAS,uBAAwB,EAK1CC,EAAUN,EAAQ,kBAAmB,EACrCO,EAAgB,UAwBpB,SAASC,EAAaC,EAAGC,EAAO,CAC/B,IAAIC,EACJ,GAAK,CAACZ,EAAcU,CAAE,EACrB,MAAM,IAAI,UAAWJ,EAAQ,8EAA+EI,CAAE,CAAE,EAGjH,GADAE,EAAKV,EAAOQ,CAAE,GAAKF,EACd,CAACL,EAAUI,EAASK,CAAG,EAC3B,MAAM,IAAI,UAAWN,EAAQ,qGAAsGF,EAAMG,EAAS,MAAO,EAAGK,CAAG,CAAE,EAElK,GAAK,CAACZ,EAAcW,CAAK,EACxB,MAAM,IAAI,UAAWL,EAAQ,+EAAgFK,CAAK,CAAE,EAGrH,GADAC,EAAKV,EAAOS,CAAK,GAAKH,EACjB,CAACL,EAAUI,EAASK,CAAG,EAC3B,MAAM,IAAI,UAAWN,EAAQ,sGAAuGF,EAAMG,EAAS,MAAO,EAAGK,CAAG,CAAE,EAEnK,GAAKF,EAAE,SAAWC,EAAK,OACtB,MAAM,IAAI,WAAYL,EAAQ,0EAA2E,CAAE,EAE5G,OAAOD,EAASK,EAAE,OAAQA,EAAG,EAAG,EAAGC,EAAM,EAAG,CAAE,CAC/C,CAKAZ,EAAO,QAAUU,IC9CjB,IAAII,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isCollection", "dtypes", "dtype", "contains", "join", "strided", "format", "IDTYPES", "GENERIC_DTYPE", "nanmskrange", "x", "mask", "dt", "main"]
}
